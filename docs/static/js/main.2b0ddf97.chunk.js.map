{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGifItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GridGifItem","className","src","alt","GifGrid","imagenes","setImagenes","useEffect","then","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAoB7C,OAEI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,YAAY,wBAEZC,MAAQV,EACRW,SAxBa,SAACR,GACtBF,EAAeE,EAAES,OAAOF,aAgChCb,EAAYgB,UAAY,CACpBf,cAAgBgB,IAAUC,KAAKC,Y,mCC1CtBC,EAAO,uCAAI,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAQF,EAAIE,MACZV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,gBAAgBZ,QATrB,kBAaZM,GAbY,4CAAJ,sDCEPO,EAAc,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGrC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,kCAAKA,SCJJO,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,EAEJnB,mBAAS,IAFL,mBAE7BuC,EAF6B,KAEnBC,EAFmB,KAkBpC,OAXAC,qBAAU,WACPvB,EAAQC,GACPuB,KAAKF,KAEP,CAACrB,IAQC,qCACI,mCAAMA,KACN,qBAAKgB,UAAU,YAAf,SAGYI,EAASX,KAAK,SAAAW,GAAQ,OAClB,cAAC,EAAD,aACIT,GAAMS,EAAST,IACXS,aCMrBI,EAhCM,WAAO,IAAD,EAIa3C,mBAAS,CAAC,cAJvB,mBAIhB4C,EAJgB,KAIJ7C,EAJI,KAOvB,OACI,qCACI,4CAEI,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACJ,6BAEQ6C,EAAWhB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAASA,SAAYA,GACZA,Y,MCfrC0B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.2b0ddf97.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n\r\n    const [inputvalue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue( e.target.value);                 \r\n    }\r\n\r\n    const handleSubmit = (e)  =>{\r\n        //prevenir la recarna del navegador\r\n        e.preventDefault();\r\n        \r\n        if(inputvalue.trim().length>2){\r\n            setCategories(cats => [inputvalue,...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder='Ingresa un valor aqui'\r\n                \r\n                value ={inputvalue}\r\n                onChange = {handleInputValue}\r\n\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\n\r\nAddCategory.prototype = {\r\n    setCategories : PropTypes.func.isRequired\r\n        \r\n    \r\n}","export const getGifs  = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=j4VlZ50kgcgXuvzIjbe3tu6nmzx8Vw5U`;\r\n    const resp = await fetch(url);\r\n    const  {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title : img.title,\r\n            url: img.images?.downsized_large.url\r\n        }\r\n\r\n    }) \r\n     return gifs;    \r\n    \r\n    //setImagenes(gifs);\r\n\r\n}","import React from 'react'\r\n\r\nexport const GridGifItem = ( {id, title, url}) => {\r\n\r\n        \r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt= {title}></img>\r\n            <p> {title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { GridGifItem } from './GridGifItem';\r\n\r\nexport const GifGrid = ( {category}) => {\r\n\r\n    const [imagenes, setImagenes] = useState([]);\r\n\r\n    \r\n    \r\n    //use efect es para que el codigo se ejecute una unica vez\r\n    useEffect(() => {\r\n       getGifs(category)\r\n       .then(setImagenes)\r\n       ;\r\n    },[category])\r\n\r\n    \r\n\r\n  \r\n\r\n\r\n    return (\r\n        <>        \r\n            <h2> {category}</h2>\r\n            <div className=\"card-grid\">\r\n                \r\n                    {\r\n                        imagenes.map( imagenes=>(\r\n                            <GridGifItem \r\n                                id = {imagenes.id }\r\n                                {...imagenes}/>\r\n                        ))\r\n                    \r\n                    }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    \r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n  \r\n    return (\r\n        <>\r\n            <h2>Gif export</h2>\r\n            \r\n                <AddCategory setCategories = {setCategories}/>\r\n                <hr></hr>\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                            <GifGrid category = {category}\r\n                                key={category}\r\n                            />\r\n\r\n                        // return <li key = {category}> {category}</li>\r\n                    ))\r\n                }\r\n                \r\n            </ol>\r\n           \r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}